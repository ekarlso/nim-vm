#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Nim repo to use
NIM_REPO=http://github.com/Araq/Nim.git

# Where to store nim-versions
NIM_DIR=${NIM_DIR:-~/.nimvm}
NIM_BIN_DIR=${NIM_BIN_DIR:-}

NIMVM_VERSION_LINK=${NIMVM_VERSION_LINK:-1}

# if version "repo" is used the directory used is $NIM_REPO_LOCATION

platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
   platform='darwin'
fi

if [ "$platform" == "darwin" ]; then
    KOCH_FLAGS="-d:release -d:useGnuReadline -d:nativeStacktrace -d:avoidTimeMachine"
    TIMEOUT_CMD="gtimeout"
elif [ "$platform" == "linux" ]; then
    KOCH_FLAGS="-d:release -d:useGnuReadline -d:nativeStacktrace"
    TIMEOUT_CMD="timeout"
else
    KOCH_FLAGS="-d:release"
    TIMEOUT_CMD="timeout"
fi

VERSION="0.3.0"

get_location() {
    link=$(readlink ${BASH_SOURCE[0]})

    if [ -f "$link" ]; then
        path=$(dirname $link)/..
    else
        path=$DIR/..
    fi

    echo $path
}

nimvm_version() {
    local version=$VERSION
    path=$(get_location)

    [ -d "$path/.git" ] && {
        version=$(cd $path; git log --pretty=format:'%h' -n 1)
    }

    echo $version
}

function err {
    local exitcode=$?
    local xtrace=$(set +o | grep xtrace)
    set +o xtrace
    local msg="[ERROR] ${BASH_SOURCE[2]}:$1 $2"
    echo $msg 1>&2;
    if [[ -n ${LOGDIR} ]]; then
        echo $msg >> "${LOGDIR}/error.log"
    fi
    $xtrace
    exit $exitcode
}


function backtrace {
    if [ -z "$DEBUG" ]; then
        return
    fi
    local level=$1
    local deep=$((${#BASH_SOURCE[@]} - 1))
    echo "[Call Trace]"
    while [ $level -le $deep ]; do
        echo "${BASH_SOURCE[$deep]}:${BASH_LINENO[$deep-1]}:${FUNCNAME[$deep-1]}"
        deep=$((deep - 1))
    done
}

# Prints line number and "message" then exits
# die $LINENO "message"
function die {
    local exitcode=$?
    set +o xtrace
    local line=$1; shift
    if [ $exitcode == 0 ]; then
        exitcode=1
    fi
    backtrace 2
    err $line "$*"
    # Give buffers a second to flush
    sleep 1
    exit $exitcode
}


function git_timed {
    local count=0
    local timeout=0

    if [[ -n "${GIT_TIMEOUT}" ]]; then
        timeout=${GIT_TIMEOUT}
    fi

    until $TIMEOUT_CMD -s SIGINT ${timeout} git "$@"; do
        # 124 is timeout(1)'s special return code when it reached the
        # timeout; otherwise assume fatal failure
        if [[ $? -ne 124 ]]; then
            die $LINENO "git call failed: [git $@]"
        fi

        count=$(($count + 1))
        warn "timeout ${count} for git call: [git $@]"
        if [ $count -eq 3 ]; then
            die $LINENO "Maximum of 3 git retries reached"
        fi
        sleep 5
    done
}

# git update using reference as a branch.
# git_update_branch ref
function git_update_branch {
    local git_branch=$1

    git checkout -f origin/$git_branch
    # a local branch might not exist
    git branch -D $git_branch || true
    git checkout -b $git_branch
}

# git update using reference as a branch.
# git_update_remote_branch ref
function git_update_remote_branch {
    local git_branch=$1

    git checkout -b $git_branch -t origin/$git_branch
}

# git update using reference as a tag. Be careful editing source at that repo
# as working copy will be in a detached mode
# git_update_tag ref
function git_update_tag {
    local git_tag=$1

    git tag -d $git_tag
    # fetching given tag only
    git_timed fetch origin tag $git_tag
    git checkout -f $git_tag
}

function get_bindir() {
    # Default to $NIMDIR/bin
    bindir=$NIM_DIR/bin
    [ ! -z "$NIM_BIN_DIR" ] && bindir=$NIM_BIN_DIR
    echo $bindir
}
function activate() {
    local version=$1
    local version_dir="$NIM_DIR/versions/$version"

    if [ ! -d "$version_dir" ]; then
        die $LINENO "Version not found $version"
    fi
}

function koch_build() {
    if [ ! -d "csources" ]; then
        case "$1" in
            (v0.9.*)
                git clone --branch v0.9.4 --depth 1 https://github.com/nim-lang/csources.git
                cd "csources"
                sh build.sh
                cd ".."
                ./bin/nimrod c koch
                ;;
            (*) 
                git clone --depth 1 https://github.com/nim-lang/csources.git
                cd "csources"
                sh build.sh
                cd ".."
                ./bin/nim c koch
                ;;
        esac
    fi

    ./koch boot $KOCH_FLAGS

    case "$1" in
        (v0.9.*)
            mv bin/nimrod bin/nim
            ;;
    esac
}

function get_versiondir() {
    local version=$1
    if [ "$version" == "repo" ]; then
        if [ -z "$NIM_REPO_LOCATION" ]; then
            echo "Nim reposiory location (NIM_REPO_LOCATION) not set"
            exit 5
        fi
        echo "$NIM_REPO_LOCATION"
    else
        echo "$NIM_DIR/versions/$version"
    fi
}

function install_version() {
    local version=$1
    local version_dir=$(get_versiondir $version)

    if [ -z "$version" ]; then
        die $LINENO "Version not specified."
    fi

    mkdir -p $NIM_DIR/versions

    if [ -d $version_dir ]; then
        die $LINENO "Version $version already exists.."
    fi

    NIM_CACHE=$NIM_DIR/repo_cache
    if [ ! -d $NIM_CACHE ]; then
        echo "No cacehd repository found, cloning $NIM_REPO to $NIM_CACHE..."
        git_timed clone $NIM_REPO $NIM_CACHE
    else
        echo "Using cached repository $NIM_CACHE"
    fi

    cp -R $NIM_CACHE $version_dir

    cd $version_dir
    git remote set-url origin $NIM_REPO
    git_timed fetch origin

    # handle git_ref accordingly to type (tag, branch)
    if [[ -n "`git show-ref refs/tags/$version`" ]]; then
        git_update_tag $version
    elif [[ -n "`git show-ref refs/heads/$version`" ]]; then
        git_update_branch $version
    elif [[ -n "`git show-ref refs/remotes/origin/$version`" ]]; then
        git_update_remote_branch $version
    else
        die $LINENO "$version is neither branch nor tag"
    fi

    koch_build $version

    bindir=$(get_bindir)
    if [ "$NIMVM_VERSION_LINK" = "1" ]; then
        ln -nfs $version_dir/bin/nim $bindir/nim.$version
    fi
}

function update_version() {
    local version=$1
    local version_dir=$(get_versiondir $version)

    if [ -z "$version" ]; then
        die $LINENO "Version not specified."
    fi

    if [ ! -d $version_dir ]; then
        die $LINENO "Version $version does not exists.."
    fi

    cd $version_dir
    git_timed fetch origin

    # handle git_ref accordingly to type (tag, branch)
    if [[ -n "`git show-ref refs/tags/$version`" ]]; then
        git_update_tag $version
    elif [[ -n "`git show-ref refs/heads/$version`" ]]; then
        git_update_branch $version
    elif [[ -n "`git show-ref refs/remotes/origin/$version`" ]]; then
        git_update_remote_branch $version
    else
        die $LINENO "$version is neither branch nor tag"
    fi

    koch_build $version

    bindir=$(get_bindir)
    if [ "$NIMVM_VERSION_LINK" = "1" ]; then
        ln -nfs $version_dir/bin/nim $bindir/nim.$version
    fi
}

function rebuild_version() {
    local version=$1
    local version_dir=$(get_versiondir $version)

    if [ -z "$version" ]; then
        die $LINENO "Version not specified."
    fi

    if [ ! -d $version_dir ]; then
        die $LINENO "Version $version does not exists.."
    fi

    cd $version_dir

    koch_build $version

    bindir=$(get_bindir)
    if [ "$NIMVM_VERSION_LINK" = "1" ]; then
        ln -nfs $version_dir/bin/nim $bindir/nim.$version
    fi
}

function remove_version() {
    local version=$1
    if [ $version == "repo" ]; then
        die $LINENO "Cannot remove 'repo' version"
    fi
    local version_dir=$(get_versiondir $version)

    if [ ! -d "$version_dir" ]; then
        die $LINENO "Version $version doesn't exist."
    fi

    rm -rf "$version_dir"
}

function get_active_version() {
    local bindir=$(get_bindir)
    local active_link=$bindir/nim
    path=$(readlink $active_link)
    if [[ "$NIM_REPO_LOCATION/bin/nim" == "$path" ]]; then
        echo "repo"
    elif [ -f "$path" ]; then
        echo $(basename $(cd $(dirname $path)/..; pwd))
    fi
}

function active_version() {
    local active=$(get_active_version)
    [ -z "$active" ] && die $LINENO "No active version"
    echo $active
}

function get_versions() {
    local version_dir="$NIM_DIR/versions"
    if [ ! -d "$version_dir" ]; then
        return
    fi

    versions=""
    for i in $version_dir/*; do
        if [ ! -x $i/bin/nim ]; then
            continue
        fi
        name=$(basename $i)
        versions+=" $name"
    done
    echo $versions
}

function list_versions() {
    local active=$(get_active_version)
    local versions=$(get_versions)

    if [ -z "$versions" ]; then
        echo "No versions installed currently"
        exit 0
    fi

    for i in $versions; do
        echo -ne "-> $i"
        if [ "$active" == $i ]; then
            echo -ne " (active)"
        fi
        echo
    done
}

function use_version() {
    local version=$1
    local version_dir=$(get_versiondir $version)
    local bindir=$(get_bindir)

    if [ "$version" == "repo" ]; then
        if [ -z "$NIM_REPO_LOCATION" ]; then
            die $LINENO "Nim reposiory location (NIM_REPO_LOCATION) not set"
            
        fi
        local version_dir="$NIM_REPO_LOCATION"
    fi

    if [ ! -d "$version_dir" ]; then
        echo $version_dir
        die $LINENO "Version $version doesn't exist. Can't activate."
    fi

    [ -w "$bindir/nim" ] && rm $bindir/nim
    ln -s $version_dir/bin/nim $bindir/nim

    echo "Now using $version at $bindir/nim"
}

while getopts ":d:b:" opt; do
    case "${opt}" in
        b)
            NIM_BIN_DIR=$OPTARG
            ;;
        d)
            NIM_DIR=$OPTARG
            ;;
    esac
done

shift "$((OPTIND-1))" # Shift off the options and optional --.

case $1 in
    install)
        install_version $2
        use_version $2
        ;;
    uninstall)
        remove_version $2
        ;;
    update)
        if [ -z "$2" ]; then
            update_version $(get_active_version)
        else
            update_version $2
            use_version $2
        fi
        ;;
    rebuild)
        if [ -z "$2" ]; then
            rebuild_version $(get_active_version)
        else
            rebuild_version $2
            use_version $2
        fi
        ;;
    list)
        list_versions
        ;;
    active)
        active_version
        ;;
    use)
        use_version $2
        ;;
    *)
        echo "Usage - Nim version manager $(nimvm_version):"
        echo "  $0 install <version>        install version"
        echo "  $0 uninstall <version>      uninstall version"
        echo "  $0 update <version>         update version"
        echo "  $0 rebuild <version>        rebuild version"
        echo "  $0 list                     list versions"
        echo "  $0 active                   show active version"
        echo "  $0 use                      use a version"
        ;;
esac
